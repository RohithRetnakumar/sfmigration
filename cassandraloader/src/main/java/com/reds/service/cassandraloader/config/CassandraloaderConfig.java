package com.reds.service.cassandraloader.config;

import com.reds.generator.redsannotations.Configuration;
import com.reds.library.redscommons.config.PlatformConfig;

/**
 * <b>Purpose:</b> This class hold all the configuration related to
 * Cassandraloader.
 * 
 * @author <b>Algols Builder</b>
 *
 *         This code is generated by Reds on 30/07/2020 02:11:30
 */
@Configuration
public class CassandraloaderConfig implements PlatformConfig {

	public enum OutputMode {
		CSV, CASSANDRA_INSERT;
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Holds the name of the configurations
	 */
	private String id = "CassandraloaderConfig";
	/**
	 * Holds the description of the configurations
	 */
	private String description = "Configurations for Cassandraloader";

	private String nodeAddress = "localhost";

	private String keyspaceName = "keyspaceName";

	private OutputMode outputMode = OutputMode.CSV;

	/**
	 * To get Unique Id for this CassandraloaderConfig
	 */
	@Override
	public String getId() {
		return id;
	}

	/**
	 * To get description of CassandraloaderConfig
	 */
	@Override
	public String getDescription() {
		return description;
	}

	@Override
	public PlatformConfig getDefault() {
		this.nodeAddress = "localhost";
		this.keyspaceName = "sf_inventory";

		return this;
	}

	public String getNodeAddress() {
		return nodeAddress;
	}

	public void setNodeAddress(String nodeAddress) {
		this.nodeAddress = nodeAddress;
	}

	public String getKeyspaceName() {
		return keyspaceName;
	}

	public void setKeyspaceName(String keyspaceName) {
		this.keyspaceName = keyspaceName;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public void setId(String id) {
		this.id = id;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public OutputMode getOutputMode() {
		return outputMode;
	}

	public void setOutputMode(OutputMode outputMode) {
		this.outputMode = outputMode;
	}

}